module main
author unknown
version 1 0 
description ''
variables id 'HL ready' 

  spec 'r' 'blocks' 'blocks'

to blocks {
  if ((v 'HL ready') == 'OK') {
    comment 'Only get color blobs that have been learned.'
    'HL request' 'Learned Blocks'
    if (('HL get info' 'Object Count') > 0) {
      return ('[data:makeList]' ('HL get block' 'id' 1) ('HL get block' 'X center' 1))
    }
  }
  comment 'Return zeros if the HL is not ready or if no color is seen'
  return ('[data:makeList]' 0 0)
}

script 568 50 {
to blocks {}
}

script 62 63 {
whenStarted
init
add_command 'blocks' 2 0 'h'
forever {
  sayIt ('[data:joinStrings]' (blocks) ',')
  process
}
}

script 56 310 {
whenStarted
'HL ready' = 'Nope'
comment 'Wait until huskylens has booted. This must be under a 
seperate ''when started'' hat block, because the process loop
should always run to maintain power.'
waitMillis 7000
comment 'A dummy i2c command to initialize before setting pins'
i2cSet 82 1 1
comment 'HL>LMS-ESP32: Green = 21, Blue = 22, Black=GND, Red = 5V'
'[sensors:i2cSetPins]' 21 22
'HL set Comms' '32' false
'HL write' 'MicroBlocks ready!' 0 0
'HL change algorithm' 'Color Recog'
'HL ready' = ('HL do' 'Knock')
sayIt (v 'HL ready')
}


module HuskyLens Input
author 'Murat Akguller, Turgut Guneysu'
version 2 1 
choices requestByMenu Blocks Arrows 
choices requestedMenu Blocks Arrows 'Learned Blocks' 'Learned Arrows' 
choices changeAlgoMenu 'Color Recog' 'Face Recog' 'Line Track' 'Obj Classify' 'Obj Recog' 'Obj Track' 'Tag Recog' 
choices getInfoMenu 'Object Count' 'Learned Count' 'Frame Number' 
choices requestFileMenu 'Save Model' 'Load Model' 
choices doMenu Knock 'Save Picture' 'Save Screenshot' 'Forget Learned Objects' 'Clear Screen' 'is pro' 'firmware version' 
choices getArrowMenu 'X origin' 'Y origin' 'X target' 'Y target' id 
choices getBlockMenu 'X center' 'Y center' Width Height id 
choices requestPhotoMenu 'Save Picture' 'Save Screenshot' 
description 'Integrates DFROBOT HuskyLens camera into MicroBlocks.
Supports I2C and Serial 9600 
Full Arduino Lib support
Changes: 
- New _HLinitLib auto init
- New HL set Comms
- Renamed Learn blocks
- SERIAL 9600 support
- SERIAL read size correction
- Parsing correction
'
variables HuskyData HL_I2C_address _buffer _cmd_list _get_lists _bufferdata HL_initalized _currAlgo _algo_list _serialMode 

  spec ' ' 'HL set Comms' 'HL set Comms i2cAddr _ serial _' 'str bool' '32' false
  spec ' ' 'HL change algorithm' 'HL change algorithm _' 'menu.changeAlgoMenu' 'Face Recog'
  spec 'r' 'HL do' 'HL do _' 'menu.doMenu' 'Knock'
  spec ' ' 'HL request' 'HL request _' 'menu.requestedMenu' 'Blocks'
  spec ' ' 'HL request by ID' 'HL request by ID _ Object _' 'num menu.requestByMenu' 1 'Blocks'
  spec 'r' 'HL get arrow' 'HL get arrow _ arrow index _' 'menu.getArrowMenu num' 'X origin' 1
  spec 'r' 'HL get block' 'HL get block _ block index _' 'menu.getBlockMenu num' 'X center' 1
  spec 'r' 'HL get info' 'HL get info _' 'menu.getInfoMenu' 'Object Count'
  spec 'r' 'HL learn current object as ID' 'HL learn current object as ID _' 'num' 1
  spec 'r' 'HL learn object as ID' 'HL learn object as ID _ Name _' 'num str' 1 'name'
  spec 'r' 'HL set CustomName' 'HL set CustomName _ for a learned object with ID _' 'str num' 'name' 1
  spec ' ' 'HL write' 'HL write _ at x _ y _' 'str num num' 'Hello!' 0 0
  spec 'r' 'HL file' 'HL file _ file# _' 'menu.requestFileMenu num' 'Save Model' 1
  spec 'r' '_HLcalc_checkSum' '_HLcalc_checkSum _' 'auto' '10'
  spec 'r' '_HLcheck' '_HLcheck'
  spec ' ' '_HLcmd_init' '_HLcmd_init'
  spec 'r' '_HLcmdarrow43' '_HLcmdarrow43 _' 'auto' 'return arrow'
  spec 'r' '_HLcmdblock42' '_HLcmdblock42 _' 'auto' 'return block'
  spec 'r' '_HLcmdinfo41' '_HLcmdinfo41 _' 'auto' 'return info'
  spec 'r' '_HLdecode_bufferdata' '_HLdecode_bufferdata _' 'auto' 'buffer data'
  spec 'r' '_HLgetcmdnum' '_HLgetcmdnum _' 'auto' 'Blocks'
  spec ' ' '_HLgetdata_from_cmd' '_HLgetdata_from_cmd'
  spec ' ' '_HLinitLib' '_HLinitLib'
  spec ' ' '_HLsendCommand' '_HLsendCommand _ data _' 'auto auto' 10 '10'

to 'HL change algorithm' algo {
  if (not HL_initalized) {'_HLinitLib'}
  local 'data' ('[data:makeList]' (at (('[data:find]' algo _algo_list) + 1) _algo_list) 0)
  '_HLsendCommand' 45 ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  _currAlgo = algo
}

to 'HL do' command {
  if (not HL_initalized) {'_HLinitLib'}
  local 'data' ('[data:newByteArray]' 0)
  local 'cmd_num' ('_HLgetcmdnum' command)
  '_HLsendCommand' cmd_num data
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL file' action fileNum {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (fileNum <= 0) (fileNum > 65535)) {return 'File number range: 0-65535'}
  local 'data' ('[data:makeList]' (fileNum % 256) (fileNum / 256))
  '_HLsendCommand' ('_HLgetcmdnum' action) ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL get arrow' arrowDetails inx {
  if ((size HuskyData) == 1) {
    return 'No Object Detected'
  } ((size HuskyData) == 0) {
    return 'HuskyData is empty, Make a request'
  }
  if (inx <= 0) {
    return 'Index Error'
  } (inx > ((size HuskyData) - 1)) {
    return 'Index Error but Object detected'
  }
  local 'split_data' ('[data:split]' (at (inx + 1) HuskyData) ',')
  return ((at ('[data:find]' arrowDetails (at 2 _get_lists)) split_data) + 0)
}

to 'HL get block' blockDetails inx {
  if ((size HuskyData) == 1) {
    return 'No Object Detected'
  } ((size HuskyData) == 0) {
    return 'HuskyData is empty, Make a request'
  }
  if (inx <= 0) {
    return 'Index Error'
  } (inx > ((size HuskyData) - 1)) {
    return 'Index Error but Object detected'
  }
  local 'split_data' ('[data:split]' (at (inx + 1) HuskyData) ',')
  return ((at ('[data:find]' blockDetails (at 1 _get_lists)) split_data) + 0)
}

to 'HL get info' infoDetails {
  if ((size HuskyData) == 0) {return 'HuskyData is empty, Make a request'}
  local 'split_data' ('[data:split]' (at 1 HuskyData) ',')
  return ((at ('[data:find]' infoDetails (at 3 _get_lists)) split_data) + 0)
}

to 'HL learn current object as ID' id {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (id <= 0) (id > 255)) {return 'ID must be 0 - 255'}
  local 'data' ('[data:makeList]' (id % 256) (id / 256))
  '_HLsendCommand' ('_HLgetcmdnum' 'Learn ById') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL learn object as ID' id name {
  if (not HL_initalized) {'_HLinitLib'}
  if (('HL learn current object as ID' id) == 'OK') {return ('HL set CustomName' name id)}
}

to 'HL request' objName {
  if (not HL_initalized) {'_HLinitLib'}
  '_HLsendCommand' ('_HLgetcmdnum' objName) ('[data:newByteArray]' 0)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  HuskyData = ('_HLdecode_bufferdata' _bufferdata)
  if (('HL get info' 'Object Count') != ((size HuskyData) - 1)) {
    HuskyData = ('[data:makeList]')
  }
}

to 'HL request by ID' id objName {
  if (not HL_initalized) {'_HLinitLib'}
  local 'resultList' ('[data:makeList]')
  if (or (id <= 0) (id > 65535)) {
    return 'ID must be greater than 0 and less than 65536'
  }
  local 'data' ('[data:makeList]' (id % 256) (id / 256))
  '_HLsendCommand' ('_HLgetcmdnum' ('[data:join]' 'ById' objName)) ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  HuskyData = ('_HLdecode_bufferdata' _bufferdata)
  if (and ((('HL get info' 'Object Count') + 1) != (size HuskyData)) (('HL get info' 'Object Count') == 0)) {
    HuskyData = ('[data:makeList]')
  }
}

to 'HL set Comms' addr serial {
  '_HLinitLib'
  HL_I2C_address = (hexToInt addr)
  _serialMode = serial
  if (and (HL_I2C_address == 0) (not _serialMode)) {
    sayIt 'I2C address can not be 0, Set I2C address'
    stopTask
  } _serialMode {
    '[serial:open]' 9600
  }
  if (not _serialMode) {
    sayIt 'I2C: ON, Serial: OFF'
  } else {
    sayIt 'I2C: OFF, Serial: ON'
  }
}

to 'HL set CustomName' name id {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (id <= 0) (id > 255)) {return 'ID must be 0 - 255'}
  local 'data' ('[data:makeList]' id ((size name) + 1))
  for byte ('[data:asByteArray]' name) {
    '[data:addLast]' byte data
  }
  '[data:addLast]' 0 data
  '_HLsendCommand' ('_HLgetcmdnum' 'Set Custom Name') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL write' text x y {
  if (not HL_initalized) {'_HLinitLib'}
  if ((size text) >= 20) {
    sayIt 'Text string must be less than 20 characters'
    stopTask
  }
  if (or (x >= 320) (x < 0)) {
    sayIt 'X must be 0-319'
    stopTask
  }
  if (or (y >= 240) (y < 0)) {
    sayIt 'Y must be 0-239'
    stopTask
  }
  local 'data' ('[data:makeList]' (size text))
  if (x >= 255) {
    '[data:addLast]' 255 data
  } else {
    '[data:addLast]' 0 data
  }
  '[data:addLast]' (x % 256) data
  '[data:addLast]' y data
  for byte ('[data:asByteArray]' text) {
    '[data:addLast]' byte data
  }
  '_HLsendCommand' ('_HLgetcmdnum' 'Write') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
}

to '_HLcalc_checkSum' cmdData {
  local 'checksum' 0
  for byte cmdData {
    checksum += byte
  }
  return (checksum % 256)
}

to '_HLcheck' {
  comment 'I2C reads n bytes in List or Bytearray format
SERIAL only reads Bytearrays of 0-n length
Therefore:
  for SERIAL, we change the lookups to bytearray'
  _buffer = (newList 32)
  _bufferdata = ('[data:makeList]')
  local 'returned' (booleanConstant false)
  local 'lookupResult' 0
  local 'serBuff' 0
  repeatUntil (returned == (booleanConstant true)) {
    waitMillis 20
    if _serialMode {
      waitMillis 50
      _buffer = ('[data:convertType]' ('[serial:read]') 'list')
    } else {
      '[sensors:i2cRead]' HL_I2C_address _buffer
    }
    lookupResult = ('[data:find]' '8517017' ('[data:joinStrings]' _buffer))
    if (lookupResult > 0) {
      _bufferdata = ('[data:join]' _bufferdata _buffer)
      returned = (booleanConstant true)
    } else {
      returned = (booleanConstant false)
    }
  }
  return returned
}

to '_HLcmd_init' {
  _cmd_list = ('[data:makeList]' 'Blocks' 33 'Arrows' 34 'Learned Blocks' 36 'Learned Arrows' 37 'Knock' 44 'Save Picture' 48 'Save Screenshot' 57 'Forget Learned Objects' 55 'Clear Screen' 53 'firmware version' 60 'is pro' 59 'ByIdBlocks' 39 'ByIdArrows' 40 'Change Algorithm' 45 'Save Model' 50 'Load Model' 51 'Learn ById' 54 'Set Custom Name' 47 'Write' 52)
  _get_lists = ('[data:makeList]' ('[data:makeList]' 'B' 'X center' 'Y center' 'Width' 'Height' 'id') ('[data:makeList]' 'A' 'X origin' 'Y origin' 'X target' 'Y target' 'id') ('[data:makeList]' 'I' 'Object Count' 'Learned Count' 'Frame Number'))
}

to '_HLcmdarrow43' obj_data {
  return ('[data:join]' 'A' ',' (((at 4 obj_data) * 256) + (at 3 obj_data)) ',' (((at 6 obj_data) * 256) + (at 5 obj_data)) ',' (((at 8 obj_data) * 256) + (at 7 obj_data)) ',' (((at 10 obj_data) * 256) + (at 9 obj_data)) ',' (('[data:join]' (at 12 obj_data) (at 11 obj_data)) + 0))
}

to '_HLcmdblock42' obj_data {
  return ('[data:join]' 'B' ',' (((at 4 obj_data) * 256) + (at 3 obj_data)) ',' (((at 6 obj_data) * 256) + (at 5 obj_data)) ',' (((at 8 obj_data) * 256) + (at 7 obj_data)) ',' (((at 10 obj_data) * 256) + (at 9 obj_data)) ',' (('[data:join]' (at 12 obj_data) (at 11 obj_data)) + 0))
}

to '_HLcmdinfo41' info_data {
  return ('[data:join]' 'I' ',' (('[data:join]' (at 4 info_data) (at 3 info_data)) + 0) ',' (('[data:join]' (at 6 info_data) (at 5 info_data)) + 0) ',' (((at 8 info_data) * 256) + (at 7 info_data)))
}

to '_HLdecode_bufferdata' data {
  comment 'Split Buffer Data 0x55 0xAA 0x11
dec85 dec170 dec17 '
  local 'parsed_data' ('[data:split]' ('[data:joinStrings]' data ',') '85,170,17,')
  '[data:delete]' 1 parsed_data
  comment 'split each parsed data(string)  for  decoding'
  for i (size parsed_data) {
    atPut i parsed_data ('[data:split]' (at i parsed_data) ',')
  }
  comment 'What is returned?
INFO?41 OK?46 IS PRO?59'
  if (((at 2 (at 1 parsed_data)) + 0) == 41) {
    local 'data_item' ('[data:makeList]')
    local 'decoded_dataList' ('[data:makeList]')
    '[data:addLast]' ('_HLcmdinfo41' (at 1 parsed_data)) decoded_dataList
    if ((size parsed_data) > 1) {
      if (((at 2 (at 2 parsed_data)) + 0) == 42) {
        for i ((size parsed_data) - 1) {
          data_item = (at (i + 1) parsed_data)
          '[data:addLast]' ('_HLcmdblock42' data_item) decoded_dataList
        }
      } else {
        for i ((size parsed_data) - 1) {
          data_item = (at (i + 1) parsed_data)
          '[data:addLast]' ('_HLcmdarrow43' data_item) decoded_dataList
        }
      }
    }
    return decoded_dataList
  } (((at 2 (at 1 parsed_data)) + 0) == 46) {
    return 'OK'
  } (((at 2 (at 1 parsed_data)) + 0) == 59) {
    if ((at 3 (at 1 parsed_data)) == 1) {
      return 'pro version'
    } else {
      return 'not pro version'
    }
  }
}

to '_HLgetcmdnum' cmdName {
  return (at (('[data:find]' cmdName _cmd_list) + 1) _cmd_list)
}

to '_HLgetdata_from_cmd' {
  comment 'I2C reads n bytes in List or Bytearray format
SERIAL only reads Bytearrays of 0-n length'
  repeatUntil (0 == (('[data:joinStrings]' _buffer) + 0)) {
    if _serialMode {
      waitMillis 50
      _buffer = ('[data:convertType]' ('[serial:read]') 'list')
    } else {
      '[sensors:i2cRead]' HL_I2C_address _buffer
    }
    _bufferdata = ('[data:join]' _bufferdata _buffer)
  }
}

to '_HLinitLib' {
  '_HLcmd_init'
  _algo_list = ('[data:makeList]' 'Color Recog' 4 'Face Recog' 0 'Line Track' 3 'Obj Classify' 6 'Obj Recog' 2 'Obj Track' 1 'Tag Recog' 5)
  HuskyData = ('[data:makeList]')
  _bufferdata = ('[data:makeList]')
  _buffer = (newList 32)
  HL_initalized = (booleanConstant true)
}

to '_HLsendCommand' cmd data {
  _buffer = ('[data:join]' ('[data:asByteArray]' ('[data:makeList]' 85 170 17 (size data) cmd)) data)
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('_HLcalc_checkSum' _buffer)))
  if _serialMode {
    '[serial:write]' _buffer
    waitMillis 50
  } else {
    '[sensors:i2cWrite]' HL_I2C_address _buffer
  }
}


module 'Sensor Primitives' Input
author MicroBlocks
version 1 1 
tags tilt acceleration light sensor capacitive button 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

  spec 'r' '[sensors:tiltX]' 'tilt x'
  spec 'r' '[sensors:tiltY]' 'tilt y'
  spec 'r' '[sensors:tiltZ]' 'tilt z'
  spec 'r' '[display:lightLevel]' 'light level'
  spec 'r' '[sensors:temperature]' 'temperature (°C)'
  space
  spec 'r' '[sensors:touchRead]' 'capacitive sensor _' 'num' 1
  space
  spec ' ' '[sensors:i2cSetClockSpeed]' 'set i2c clock speed _' 'num' 400000
  spec ' ' '[sensors:i2cSetPins]' 'set i2c pins SDA _ SCL _' 'num num' 4 5

module micropup
author Ste7an
version 1 1 
choices data_type b h i 
description 'Library to facilitate communication with Pybricks hubs. See https://github.com/ste7anste7an/micropup'
variables _pup_sensor_id _pup_commands _pup_nr_modes _pup_cur_mode _pup_last_nack _pup_connected _pup_senddata _pup_payloads 

  spec ' ' 'init' 'init : sensor_id _' 'auto' 62
  spec ' ' 'add_command' 'add_command _ to_hub _ from_hub _ type _' 'str auto auto str.data_type' '' '1' '1' 'b'
  spec ' ' 'process' 'process'
  spec 'r' '_tohex' '_tohex _' 'auto' '10'
  spec 'r' '_bytestowords' '_bytestowords _' 'auto' '10'
  spec 'r' '_unsignedbytes' '_unsignedbytes _' 'auto' '10'
  spec 'r' '_bytetoword' '_bytetoword _' 'auto' '10'
  spec 'r' '_wordstobytes' '_wordstobytes _' 'auto' '10'
  spec 'r' '_wordtobyte' '_wordtobyte _' 'auto' '10'
  spec 'r' '_longtobyte' '_longtobyte _' 'auto' '10'
  spec 'r' '_bytestolongs' '_bytestolongs _' 'auto' '10'
  spec 'r' '_bytetolong' '_bytetolong _' 'auto' '10'
  spec 'r' '_longstobytes' '_longstobytes _' 'auto' '10'
  spec 'r' '_make_payload' '_make_payload _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_hextolist' '_hextolist _' 'auto' '10'
  spec 'r' '_heartbeat' '_heartbeat'
  spec ' ' '_init_sensor' '_init_sensor'
  spec ' ' '_initmode' '_initmode _' 'auto' '10'
  spec ' ' '_sendatachk' '_sendatachk _' 'auto' '10'
  spec ' ' '_sendhex' '_sendhex _' 'auto' '10'
  spec 'r' '_calc_len_data' '_calc_len_data _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_get_type' '_get_type _' 'auto' '10'
  spec 'r' '_log_len' '_log_len _' 'auto' '10'
  spec 'r' '_log2' '_log2 _' 'auto' '10'
  spec ' ' '_reset' '_reset'
  spec ' ' '_send_data' '_send_data _' 'auto' '10'
  spec ' ' '_set_payload' '_set_payload _ _' 'auto auto' '10' '10'

to '_bytestolongs' bytes {
  local 'longs' ('[data:makeList]')
  for i ((size bytes) / 4) {
    local 'cnt' ((i * 4) - 3)
    '[data:addLast]' ('_bytetolong' ('[data:makeList]' (at (cnt - 0) bytes) (at (cnt + 1) bytes) (at (cnt + 2) bytes) (at (cnt + 3) bytes))) longs
  }
  return longs
}

to '_bytestowords' bytes {
  local 'len' ((size bytes) / 2)
  local 'words' (newList len)
  for i len {
    local 'cnt' (i * 2)
    atPut i words ('_bytetoword' ('[data:makeList]' (at (cnt - 1) bytes) (at (cnt + 0) bytes)))
  }
  return words
}

to '_bytetolong' bytes {
  return ((((at 1 bytes) + ((at 2 bytes) << 8)) + ((at 3 bytes) << 16)) + ((at 4 bytes) << 24))
}

to '_bytetoword' bytes {
  local 'unsigned' ((at 1 bytes) + ((at 2 bytes) << 8))
  if (unsigned > 32767) {
    unsigned = (unsigned - 65536)
  }
  return unsigned
}

to '_calc_len_data' data_type to_hub from_hub {
  return ('_log_len' ((1 << data_type) * (maximum to_hub from_hub)))
}

to '_get_type' type {
  local 'data_type' 0
  if (type == 'i') {
    data_type = 2
  } (type == 'h') {
    data_type = 1
  } else {
    data_type = 0
  }
  return data_type
}

to '_heartbeat' {
  if (((millisOp) - _pup_last_nack) > 4000) {'_reset'}
  if (('[serial:available]') > 0) {
    local 'cmd' (at 1 ('[serial:readNr]' 1))
    if (cmd == 2) {
      _pup_last_nack = (millisOp)
      '_sendatachk' ('[data:makeList]' ((hexToInt '46') | 0) 0)
    } (cmd == (hexToInt '46')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      comment 'mode = (b & 0b111)'
      local 'wrtmode' ((at 3 ser_data) & 7)
      _pup_cur_mode = wrtmode
      comment ' len = 2 ** ((b & 0b111000) >> 3)'
      local 'lenpow2' (((at 3 ser_data) & 56) >> 3)
      local 'len' (1 << lenpow2)
      local 'list' (newList len)
      for i len {
        atPut i list (at (i + 3) ser_data)
      }
      return ('[data:makeList]' wrtmode list)
    } (cmd == (hexToInt '43')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      _pup_cur_mode = (at 1 ser_data)
      '_send_data' _pup_cur_mode
    }
  }
}

to '_hextolist' hexstr {
  local 'len' ((size hexstr) / 2)
  local 'data' (newList len)
  for i len {
    atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
  }
  return data
}

to '_init_sensor' {
  '_sendhex' 0
  comment 'TYPE_ID'
  '_sendatachk' ('[data:makeList]' (hexToInt '40') _pup_sensor_id)
  comment 'CMD_MODES 0x49 <nr_modes> <nr_views>'
  '_sendatachk' ('[data:makeList]' (hexToInt '49') (_pup_nr_modes - 1) (_pup_nr_modes - 1))
  comment 'set baud rate to 115200'
  '_sendhex' '5200c201006e'
  comment 'CMD_VERSION'
  '_sendhex' '5f0000000100000105a5'
  for i _pup_nr_modes {
    '_initmode' ((_pup_nr_modes + 0) - i)
  }
}

to '_initmode' mode {
  local 'cur_command' (at (mode + 1) _pup_commands)
  local 'data_type' (at 4 cur_command)
  comment 'INFO mode + power'
  local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt 'a0') | mode)) ('_hextolist' ('[data:toString]' '00646174')) ('[data:makeList]' (hexToInt '30') (48 + mode)) ('_hextolist' ('[data:toString]' '0080000000050400000000')))
  waitMillis 20
  '_sendatachk' list
  comment 'INFO RAW, PCT, SI'
  for i 3 {
    local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt '98') | mode) i) ('_hextolist' ('[data:toString]' '000000000000c842')))
    '_sendatachk' list
    waitMillis 20
  }
  waitMillis 10
  comment 'INFO UNITS = empty len 0'
  local 'list' ('[data:makeList]' ((hexToInt '80') | mode) 4 0)
  '_sendatachk' list
  comment 'info mapping: 0x88|mode 0x05 input=(abs)0x10 output=(abs)0x10'
  local 'list' ('[data:makeList]' ((hexToInt '88') | mode) 5 (hexToInt '10') (hexToInt '10'))
  '_sendatachk' list
  comment '0x90|mode 0x80 <data_type> <log2(len)> <digits> <decimals>'
  local 'max_len' (maximum (at 2 cur_command) (at 3 cur_command))
  local 'list' ('[data:makeList]' ((hexToInt '90') | mode) (hexToInt '80') max_len (at 4 cur_command) 3 0)
  '_sendatachk' list
}

to '_log2' len {
  if (len == 1) {
    return 0
  } (len == 2) {
    return 1
  } (len == 4) {
    return 2
  } (len == 8) {
    return 3
  } (len == 16) {
    return 4
  } (len == 32) {
    return 5
  } else {
    return 0
  }
}

to '_log_len' len {
  local 'loglen' 0
  if (len > 16) {
    return 5
  } (len > 8) {
    return 4
  } (len > 4) {
    return 3
  } (len > 2) {
    return 2
  } (len > 1) {
    return 1
  } else {
    return 0
  }
}

to '_longstobytes' longs {
  local 'bytes' ('[data:makeList]')
  for i (size longs) {
    bytes = ('[data:join]' bytes ('_longtobyte' (at i longs)))
  }
  return bytes
}

to '_longtobyte' long {
  local 'bytes' ('[data:makeList]' (long & 255) ((long >> 8) & 255) ((long >> 16) & 255) ((long >> 24) & 255))
  return bytes
}

to '_make_payload' payload data_type tot_len {
  if (data_type == 0) {
    local 'raw_bytes' payload
  } (data_type == 1) {
    local 'raw_bytes' ('_wordstobytes' payload)
  } (data_type == 2) {
    local 'raw_bytes' ('_longstobytes' payload)
  } else {
  }
  comment 'extend raw_bytes to 1>>loglen'
  local 'pad_len' ((1 << tot_len) - (size raw_bytes))
  if (pad_len > 0) {
    return ('[data:join]' raw_bytes (newList pad_len))
  } else {
    return raw_bytes
  }
}

to '_reset' {
  '[serial:close]'
  _pup_last_nack = (millisOp)
  _pup_cur_mode = 0
  _pup_connected = 0
  local 'tmp_var' 0
  if (('[serial:espversion]') == 2) {
    tmp_var = (digitalReadOp 8)
    digitalWriteOp 7 true
    waitMillis 50
    digitalWriteOp 7 false
  } else {
    '[serial:close]'
    tmp_var = (digitalReadOp 18)
    digitalWriteOp 19 true
    waitMillis 50
    digitalWriteOp 19 false
  }
  waitMillis 450
  '[serial:open]' 2400
  '_init_sensor'
  '_sendhex' 4
  '[serial:open]' 115200
  waitMillis 10
  '_sendhex' 'c0003f'
  _pup_connected = 1
  '[serial:open]' 115200
}

to '_send_data' mode {
  if (_pup_connected == 1) {
    local 'payload' (at (mode + 1) _pup_payloads)
    local 'loglen' (at 5 (at (mode + 1) _pup_commands))
    local 'list' ('[data:makeList]' (((hexToInt 'c0') | (loglen << 3)) | mode))
    local 'len' (1 << loglen)
    local 'datalist' (newList len)
    for i len {
      atPut i datalist (at i payload)
    }
    '_sendatachk' ('[data:join]' list datalist)
  }
}

to '_sendatachk' data {
  local 'chk' 255
  for i (size data) {
    chk = (chk ^ (at i data))
  }
  '[serial:write]' ('[data:join]' data ('[data:makeList]' chk))
}

to '_sendhex' hexstr {
  if (isType hexstr 'number') {
    local 'data' (newList 1)
    atPut 1 data hexstr
  } else {
    local 'len' ((size hexstr) / 2)
    local 'data' (newList len)
    for i len {
      atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
    }
  }
  '[serial:write]' data
  waitMillis 1
}

to '_set_payload' mode payload {
  atPut (mode + 1) _pup_payloads payload
}

to '_tohex' data {
  local 'hexstr' ('[data:toString]' '')
  for i (size data) {
    local 'hexstr' ('[data:join]' hexstr ('dec2any Base' '16' (at i data) 2 false))
  }
  return hexstr
}

to '_unsignedbytes' bytes {
  local 'unsigned' ('[data:makeList]')
  for i (size bytes) {
    local 'val' (at i bytes)
    if (val > 127) {
      val = (val - 256)
    }
    '[data:addLast]' val unsigned
  }
  return unsigned
}

to '_wordstobytes' words {
  local 'bytes' ('[data:makeList]')
  for i (size words) {
    bytes = ('[data:join]' bytes ('_wordtobyte' (at i words)))
  }
  return bytes
}

to '_wordtobyte' word {
  local 'bytes' ('[data:makeList]' (word & 255) (word >> 8))
  return bytes
}

to add_command cmd to_hub from_hub type {
  comment 'type is dropdown ''b'', ''h'', ''i'' for byte, 16-bit word, 32-bit int'
  local 'data_type' ('_get_type' type)
  local 'new_command' ('[data:makeList]' cmd to_hub from_hub data_type ('_calc_len_data' data_type to_hub from_hub))
  if ((size _pup_commands) == 0) {
    _pup_commands = ('[data:makeList]' new_command)
  } else {
    '[data:addLast]' new_command _pup_commands
  }
  _pup_nr_modes = (size _pup_commands)
  '[data:addLast]' (newList 32) _pup_payloads
}

to init sensor_id {
  if (sensor_id == 0) {
    _pup_sensor_id = 61
  } else {
    _pup_sensor_id = sensor_id
  }
  comment 'Initialize global variables'
  _pup_commands = ('[data:makeList]')
  _pup_cur_mode = 0
  _pup_senddata = (newList 32)
  _pup_payloads = ('[data:makeList]')
  _pup_last_nack = (millisOp)
}

to process {
  local 'local_data' ('_heartbeat')
  local 'data_from_hub' (booleanConstant false)
  if ((size local_data) > 0) {
    comment 'arguments passed'
    data_from_hub = (booleanConstant true)
    local 'mode' (at 1 local_data)
    local 'payload_bytes' (at 2 local_data)
  } else {
    local 'mode' _pup_cur_mode
    local 'payload' ('[data:makeList]')
  }
  local 'function_name' (at 1 (at (mode + 1) _pup_commands))
  local 'has_return' ((at 2 (at (mode + 1) _pup_commands)) > 0)
  local 'has_arg' ((at 3 (at (mode + 1) _pup_commands)) > 0)
  local 'data_type' (at 4 (at (mode + 1) _pup_commands))
  local 'tot_len' (at 5 (at (mode + 1) _pup_commands))
  if data_from_hub {
    if (data_type == 0) {
      local 'payload' ('_unsignedbytes' payload_bytes)
    } (data_type == 1) {
      local 'payload' ('_bytestowords' payload_bytes)
    } (data_type == 2) {
      local 'payload' ('_bytestolongs' payload_bytes)
    }
  }
  if (or (and (not has_arg) has_return) (and has_arg (and has_return data_from_hub))) {
    local 'ret_val' (callCustomReporter function_name payload)
    if (isType ret_val 'number') {
      ret_val = ('[data:makeList]' ret_val)
    }
    '_set_payload' mode ('_make_payload' ret_val data_type tot_len)
  } (and has_arg (and (not has_return) data_from_hub)) {
    callCustomCommand function_name payload
  }
  '_send_data' _pup_cur_mode
}

