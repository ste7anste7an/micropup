module main
author unknown
version 1 0 
description ''

  spec 'r' 'gp' 'gp'

to gp {
  return ('[data:makeList]' ('[io:bp_axisx]') ('[io:bp_axisy]') ('[io:bp_axisrx]') ('[io:bp_axisry]'))
}

script 413 40 {
to gp {}
}

script 411 194 {
whenStarted
init
add_command 'gp' 4 0 'h'
'[tft:clear]'
forever {
  process
  '[tft:circle]' ('[misc:rescale]' ('[io:bp_axisx]') -512 512 0 320) ('[misc:rescale]' ('[io:bp_axisy]') -512 512 0 240) 5 (colorSwatch 72 218 233 255)
  graphIt ('[io:bp_axisx]') ('[io:bp_axisy]')
  if (('[io:bp_button]') == 1) {
    '[tft:clear]'
  }
}
}


module 'HTTP client' Comm
author MicroBlocks
version 1 4 
depends WiFi 
tags http network get post put delete 
choices requestTypes GET POST PUT DELETE 
description 'Send HTTP requests and get responses back. You can use this library to fetch or store data in online servers, or to control other Wifi-enabled boards.
'

  spec 'r' '_http_body_start' '_http_body_start _' 'auto' ''
  spec 'r' '_http_header_text' '_http_header_text _' 'auto' ''
  spec 'r' '_http_status_text' '_http_status_text _' 'auto' ''
  spec 'r' '_http_header' '_header _ of response _' 'auto auto' 'content-length' ''
  spec 'r' '_http_status' '_status of response _' 'auto' ''
  spec 'r' '_line_end' '_line_end'
  spec 'r' '_lowercase' '_lowercase _' 'auto' 'ABC Def gH'
  spec 'r' '_request_url' '_request_url _ method _ body _ : port _' 'str menu.requestTypes str num' '' 'GET' '' 80
  spec 'r' '_readHTTPResponse' '_readHTTPResponse'
  spec 'r' 'http܃//' 'http #SVG#colon-double-slash _ : port _' 'auto num' 'microblocks.fun/example.txt' 80
  spec ' ' 'request' '_ data _ to http #SVG#colon-double-slash _ : port _' 'menu.requestTypes str str num' 'POST' 'MicroBlocks is fun' 'microblocks.fun' 80

to '_http_body_start' response {
  return (('[data:find]' ('[data:unicodeString]' ('[data:makeList]' 13 10 13 10)) response) + 4)
}

to '_http_header' header response {
  local 'header text' ('_http_header_text' response)
  header = ('_lowercase' header)
  repeatUntil ((size (v 'header text')) < 3) {
    local 'key' ('[data:copyFromTo]' (v 'header text') 1 (('[data:find]' ':' (v 'header text')) - 1))
    if (('_lowercase' key) == header) {
      return ('[data:copyFromTo]' (v 'header text') (('[data:find]' ':' (v 'header text')) + 2) (('[data:find]' ('_line_end') (v 'header text')) - 1))
    }
    'header text' = ('[data:copyFromTo]' (v 'header text') (('[data:find]' ('_line_end') (v 'header text')) + 2))
  }
  return (booleanConstant false)
}

to '_http_header_text' response {
  local 'headersStart' (('[data:find]' ('_line_end') response) + 2)
  return ('[data:copyFromTo]' response headersStart (('_http_body_start' response) + 2))
}

to '_http_status' response {
  return (('[data:copyFromTo]' ('_http_status_text' response) 1 4) + 0)
}

to '_http_status_text' response {
  return ('[data:copyFromTo]' response ('[data:find]' ' ' response) ('[data:find]' ('_line_end') response))
}

to '_line_end' {
  return ('[data:unicodeString]' ('[data:makeList]' 13 10))
}

to '_lowercase' string {
  local 'lowercased' ''
  local 'char code' ''
  for c (size string) {
    'char code' = ('[data:unicodeAt]' c string)
    if (and ((v 'char code') >= 65) ((v 'char code') <= 90)) {
      'char code' = ((v 'char code') + 32)
    }
    lowercased = ('[data:join]' lowercased ('[data:unicodeString]' (v 'char code')))
  }
  return lowercased
}

to '_readHTTPResponse' {
  local 'response' ''
  local 'lastChunkTime' (millisOp)
  repeatUntil (not ('[net:httpIsConnected]')) {
    local 'chunk' ('[net:httpResponse]')
    if ((size chunk) > 0) {
      response = ('[data:join]' response chunk)
      lastChunkTime = (millisOp)
    } (((millisOp) - lastChunkTime) > 10000) {
      return response
    }
    waitMillis 20
  }
  response = ('[data:join]' response ('[net:httpResponse]'))
  return response
}

to '_request_url' url method body optionalPort {
  local 'port' 80
  if ((pushArgCount) > 3) {
    port = optionalPort
  }
  local 'host' ''
  local 'path' ''
  local 'slashPosition' ('[data:find]' '/' url)
  if (slashPosition > 0) {
    host = ('[data:copyFromTo]' url 1 (slashPosition - 1))
    path = ('[data:copyFromTo]' url (slashPosition + 1))
  } else {
    host = url
  }
  if (('[net:wifiStatus]') != 'Connected') {
    return ('[data:join]' '0 Not Connected' ('_line_end'))
  }
  '[net:httpConnect]' host port
  if (not ('[net:httpIsConnected]')) {
    return ('[data:join]' '0 Could not connect to server' ('_line_end'))
  }
  '[net:httpRequest]' method host path
  return ('_readHTTPResponse')
}

to 'http܃//' url optionalPort {
  local 'port' 80
  if ((pushArgCount) > 1) {
    port = optionalPort
  }
  local 'response' ('_request_url' url 'GET' '' port)
  if (response != '') {
    if (('_http_status' response) == 200) {
      return ('[data:copyFromTo]' response ('_http_body_start' response))
    } else {
      return ('_http_status_text' response)
    }
  } else {
    return 'Failed to get response'
  }
}

to request method data url optionalPort {
  local 'port' 80
  if ((pushArgCount) > 3) {
    port = optionalPort
  }
  local 'response' ('_request_url' url method data port)
  if (response != '') {
    local 'status' ('_http_status' response)
    local 'body start' ('_http_body_start' response)
    if (and (200 == status) ((v 'body start') > 0)) {
      sayIt ('[data:copyFromTo]' response (v 'body start'))
    } else {
      sayIt ('_http_status_text' response)
    }
  } else {
    sayIt 'Failed to get response'
  }
}


module 'LED Display' Output
author MicroBlocks
version 1 9 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'
  spec ' ' 'set display color' 'set display color _' 'color'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to 'set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module TFT Output
author MicroBlocks
version 1 11 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

  spec ' ' '[tft:clear]' 'clear TFT display'
  space
  spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
  spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
  spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
  spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
  spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
  spec ' ' 'tft_drawVector' 'draw vector x _ y _ angle _ length _ color _' 'num num num num color' 40 40 45 40
  space
  spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _ : bg color _' 'str num num color num bool color' 'Hello World!' 5 5 nil 2 true
  spec ' ' 'tft_drawText' 'draw text _ on TFT at x _ y _ color _ : scale _ : bg color _' 'str num num color num color' 'Line 1
Line 2' 50 20 nil 2
  space
  spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'num num color' 10 10
  spec ' ' '[tft:pixelRow]' 'draw pixel row _ x _ y _ : bytesPerPixel _ : palette _' 'auto num num num str' 'aList' 0 0 4
  spec ' ' '[tft:drawBitmap]' 'draw bitmap _ palette _ on TFT at x _ y _' 'str str num num' 'aBitmap' 'a list of colors' 10 10
  space
  spec 'r' 'tft_colorSwatch' '_' 'color'
  spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'makeGray' 'gray _ %' 'num' 50
  spec 'r' 'randomColor' 'random color'
  space
  spec 'r' '[tft:getWidth]' 'TFT width'
  spec 'r' '[tft:getHeight]' 'TFT height'
  space
  spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10
  space
  spec ' ' '_deferMonochromeDisplayUpdates' '_defer monochrome display updates'
  spec ' ' '_resumeMonochromeDisplayUpdates' '_resume monochrome display updates'

to '_deferMonochromeDisplayUpdates' {
  '[tft:deferUpdates]'
}

to '_resumeMonochromeDisplayUpdates' {
  '[tft:resumeUpdates]'
}

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to makeGray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to tft_colorSwatch color {
  return color
}

to tft_drawText s x y color optionalScale optionalBGColor {
  local 'scale' (argOrDefault 5 2)
  local 'bgColor' (argOrDefault 6 '')
  local 'lines' ('[data:split]' s ('[data:unicodeString]' 10))
  for line ('[data:split]' s ('[data:unicodeString]' 10)) {
    if (isType bgColor 'number') {
      '[tft:text]' line x y color scale false bgColor
    } else {
      '[tft:text]' line x y color scale false
    }
    y += (8 * scale)
  }
}

to tft_drawVector x y angle length color {
  local 'endX' (x + ((length * ('[misc:sin]' (100 * (angle + 90)))) >> 14))
  local 'endY' (y + ((length * ('[misc:sin]' (100 * angle))) >> 14))
  '[tft:line]' x y endX endY color
}


module WiFi Comm
author MicroBlocks
version 1 8 
tags communication network 
description 'Connect to a WiFi network. Used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

  spec ' ' 'wifiConnect' 'wifi connect to _ password _ : IP _ gateway _ subnet _' 'str str auto auto auto' 'Network_Name' '' '192.168.1.42' '192.168.1.1' '255.255.255.0'
  spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
  space
  spec 'r' 'getIPAddress' 'IP address'
  spec 'r' '[net:myMAC]' 'MAC address'
  space
  spec ' ' '[net:allowWiFiAndBLE]' 'allow WiFi while using BLE _' 'bool' true

to getIPAddress {
  return ('[net:myIPAddress]')
}

to wifiConnect ssid password fixedIP gatewayIP subnetIP {
  if (not ('[net:hasWiFi]')) {return}
  '[net:stopWiFi]'
  if ((pushArgCount) < 5) {
    '[net:startWiFi]' ssid password
  } else {
    '[net:startWiFi]' ssid password false fixedIP gatewayIP subnetIP
  }
  local 'startMSecs' (millisOp)
  repeatUntil (('[net:myIPAddress]') != '0.0.0.0') {
    comment 'Timeout after N seconds'
    if (((millisOp) - startMSecs) > 30000) {
      sayIt 'Could not connect'
      return 0
    }
    comment 'Slow blink while trying to connect'
    setUserLED true
    waitMillis 300
    setUserLED false
    waitMillis 300
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  if ((size password) < 8) {
    sayIt 'Password must be at least 8 characters'
    return 0
  }
  '[net:startWiFi]' ssid password true
  if ('Connected' != ('[net:wifiStatus]')) {
    sayIt 'Could not create hotspot'
    return 0
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}


module lmsesp
author Ste7an
version 1 0 
description 'Extra system functions for Serial communication and ESP32 version
This isincorporated in a MicroPup firmware version for LMS-ESP32'

  spec 'r' '[serial:readNr]' 'serial read _ bytes' 'num' 10
  spec 'r' '[serial:available]' 'serial available'
  spec 'r' '[io:bp_connected]' 'BP connected'
  spec 'r' '[io:bp_button]' 'BP buttons'
  spec 'r' '[io:bp_dpad]' 'BP dpads'
  spec 'r' '[io:bp_axisx]' 'BP AxisX'
  spec 'r' '[io:bp_axisy]' 'BP AxisY'
  spec 'r' '[io:bp_axisrx]' 'BP AxisRX'
  spec 'r' '[io:bp_axisry]' 'BP AxisRY'
  spec 'r' '[serial:espversion]' 'get esp version'
  spec 'r' '[serial:millis]' 'millis'

module micropup
author Ste7an
version 0 2 
choices data_type b h i 
description 'Library to facilitate communication with Pybricks hubs. See https://github.com/ste7anste7an/micropup'
variables _pup_sensor_id _pup_commands _pup_nr_modes _pup_cur_mode _pup_last_nack _pup_connected _pup_senddata _pup_payloads 

  spec ' ' 'init' 'init : sensor_id _' 'auto' 62
  spec ' ' 'add_command' 'add_command _ to_hub _ from_hub _ type _' 'str auto auto str.data_type' '' '1' '1' 'b'
  spec ' ' 'process' 'process'
  spec ' ' 'reset_nack' 'reset_nack'
  spec 'r' '_tohex' '_tohex _' 'auto' '10'
  spec 'r' '_bytestowords' '_bytestowords _' 'auto' '10'
  spec 'r' '_unsignedbytes' '_unsignedbytes _' 'auto' '10'
  spec 'r' '_bytetoword' '_bytetoword _' 'auto' '10'
  spec 'r' '_wordstobytes' '_wordstobytes _' 'auto' '10'
  spec 'r' '_wordtobyte' '_wordtobyte _' 'auto' '10'
  spec 'r' '_longtobyte' '_longtobyte _' 'auto' '10'
  spec 'r' '_bytestolongs' '_bytestolongs _' 'auto' '10'
  spec 'r' '_bytetolong' '_bytetolong _' 'auto' '10'
  spec 'r' '_longstobytes' '_longstobytes _' 'auto' '10'
  spec 'r' '_make_payload' '_make_payload _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_hextolist' '_hextolist _' 'auto' '10'
  spec 'r' '_heartbeat' '_heartbeat'
  spec ' ' '_init_sensor' '_init_sensor'
  spec ' ' '_initmode' '_initmode _' 'auto' '10'
  spec ' ' '_sendatachk' '_sendatachk _' 'auto' '10'
  spec ' ' '_sendhex' '_sendhex _' 'auto' '10'
  spec 'r' '_calc_len_data' '_calc_len_data _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_get_type' '_get_type _' 'auto' '10'
  spec 'r' '_log_len' '_log_len _' 'auto' '10'
  spec 'r' '_log2' '_log2 _' 'auto' '10'
  spec ' ' '_reset' '_reset'
  spec ' ' '_send_data' '_send_data _' 'auto' '10'
  spec ' ' '_set_payload' '_set_payload _ _' 'auto auto' '10' '10'

to '_bytestolongs' bytes {
  local 'longs' ('[data:makeList]')
  for i ((size bytes) / 4) {
    local 'cnt' ((i * 4) - 3)
    '[data:addLast]' ('_bytetolong' ('[data:makeList]' (at (cnt - 0) bytes) (at (cnt + 1) bytes) (at (cnt + 2) bytes) (at (cnt + 3) bytes))) longs
  }
  return longs
}

to '_bytestowords' bytes {
  local 'len' ((size bytes) / 2)
  local 'words' (newList len)
  for i len {
    local 'cnt' (i * 2)
    atPut i words ('_bytetoword' ('[data:makeList]' (at (cnt - 1) bytes) (at (cnt + 0) bytes)))
  }
  return words
}

to '_bytetolong' bytes {
  return ((((at 1 bytes) + ((at 2 bytes) << 8)) + ((at 3 bytes) << 16)) + ((at 4 bytes) << 24))
}

to '_bytetoword' bytes {
  local 'unsigned' ((at 1 bytes) + ((at 2 bytes) << 8))
  if (unsigned > 32767) {
    unsigned = (unsigned - 65536)
  }
  return unsigned
}

to '_calc_len_data' data_type to_hub from_hub {
  return ('_log_len' ((1 << data_type) * (maximum to_hub from_hub)))
}

to '_get_type' type {
  local 'data_type' 0
  if (type == 'i') {
    data_type = 2
  } (type == 'h') {
    data_type = 1
  } else {
    data_type = 0
  }
  return data_type
}

to '_heartbeat' {
  if (((millisOp) - _pup_last_nack) > 4000) {'_reset'}
  if (('[serial:available]') > 0) {
    local 'cmd' (at 1 ('[serial:readNr]' 1))
    if (cmd == 2) {
      _pup_last_nack = (millisOp)
      '_sendatachk' ('[data:makeList]' ((hexToInt '46') | 0) 0)
    } (cmd == (hexToInt '46')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      comment 'mode = (b & 0b111)'
      local 'wrtmode' ((at 3 ser_data) & 7)
      _pup_cur_mode = wrtmode
      comment ' len = 2 ** ((b & 0b111000) >> 3)'
      local 'lenpow2' (((at 3 ser_data) & 56) >> 3)
      local 'len' (1 << lenpow2)
      local 'list' (newList len)
      for i len {
        atPut i list (at (i + 3) ser_data)
      }
      return ('[data:makeList]' wrtmode list)
    } (cmd == (hexToInt '43')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      _pup_cur_mode = (at 1 ser_data)
      '_send_data' _pup_cur_mode
    }
  }
}

to '_hextolist' hexstr {
  local 'len' ((size hexstr) / 2)
  local 'data' (newList len)
  for i len {
    atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
  }
  return data
}

to '_init_sensor' {
  '_sendhex' 0
  comment 'TYPE_ID'
  '_sendatachk' ('[data:makeList]' (hexToInt '40') _pup_sensor_id)
  comment 'CMD_MODES 0x49 <nr_modes> <nr_views>'
  '_sendatachk' ('[data:makeList]' (hexToInt '49') (_pup_nr_modes - 1) (_pup_nr_modes - 1))
  comment 'set baud rate to 115200'
  '_sendhex' '5200c201006e'
  comment 'CMD_VERSION'
  '_sendhex' '5f0000000100000105a5'
  for i _pup_nr_modes {
    '_initmode' ((_pup_nr_modes + 0) - i)
  }
}

to '_initmode' mode {
  local 'cur_command' (at (mode + 1) _pup_commands)
  local 'data_type' (at 4 cur_command)
  comment 'INFO mode + power'
  local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt 'a0') | mode)) ('_hextolist' ('[data:toString]' '00646174')) ('[data:makeList]' (hexToInt '30') (48 + mode)) ('_hextolist' ('[data:toString]' '0080000000050400000000')))
  waitMillis 20
  '_sendatachk' list
  comment 'INFO RAW, PCT, SI'
  for i 3 {
    local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt '98') | mode) i) ('_hextolist' ('[data:toString]' '000000000000c842')))
    '_sendatachk' list
    waitMillis 20
  }
  waitMillis 10
  comment 'INFO UNITS = empty len 0'
  local 'list' ('[data:makeList]' ((hexToInt '80') | mode) 4 0)
  '_sendatachk' list
  comment 'info mapping: 0x88|mode 0x05 input=(abs)0x10 output=(abs)0x10'
  local 'list' ('[data:makeList]' ((hexToInt '88') | mode) 5 (hexToInt '10') (hexToInt '10'))
  '_sendatachk' list
  comment '0x90|mode 0x80 <data_type> <log2(len)> <digits> <decimals>'
  local 'max_len' (maximum (at 2 cur_command) (at 3 cur_command))
  local 'list' ('[data:makeList]' ((hexToInt '90') | mode) (hexToInt '80') max_len (at 4 cur_command) 3 0)
  '_sendatachk' list
}

to '_log2' len {
  if (len == 1) {
    return 0
  } (len == 2) {
    return 1
  } (len == 4) {
    return 2
  } (len == 8) {
    return 3
  } (len == 16) {
    return 4
  } (len == 32) {
    return 5
  } else {
    return 0
  }
}

to '_log_len' len {
  local 'loglen' 0
  if (len > 16) {
    return 5
  } (len > 8) {
    return 4
  } (len > 4) {
    return 3
  } (len > 2) {
    return 2
  } (len > 1) {
    return 1
  } else {
    return 0
  }
}

to '_longstobytes' longs {
  local 'bytes' ('[data:makeList]')
  for i (size longs) {
    bytes = ('[data:join]' bytes ('_longtobyte' (at i longs)))
  }
  return bytes
}

to '_longtobyte' long {
  local 'bytes' ('[data:makeList]' (long & 255) ((long >> 8) & 255) ((long >> 16) & 255) ((long >> 24) & 255))
  return bytes
}

to '_make_payload' payload data_type tot_len {
  if (data_type == 0) {
    local 'raw_bytes' payload
  } (data_type == 1) {
    local 'raw_bytes' ('_wordstobytes' payload)
  } (data_type == 2) {
    local 'raw_bytes' ('_longstobytes' payload)
  } else {
  }
  comment 'extend raw_bytes to 1>>loglen'
  local 'pad_len' ((1 << tot_len) - (size raw_bytes))
  if (pad_len > 0) {
    return ('[data:join]' raw_bytes (newList pad_len))
  } else {
    return raw_bytes
  }
}

to '_reset' {
  '[serial:close]'
  _pup_last_nack = (millisOp)
  _pup_cur_mode = 0
  _pup_connected = 0
  local 'tmp_var' 0
  if (('[serial:espversion]') == 2) {
    tmp_var = (digitalReadOp 8)
    digitalWriteOp 7 true
    waitMillis 50
    digitalWriteOp 7 false
  } else {
    '[serial:close]'
    tmp_var = (digitalReadOp 18)
    digitalWriteOp 19 true
    waitMillis 50
    digitalWriteOp 19 false
  }
  waitMillis 450
  '[serial:open]' 2400
  '_init_sensor'
  '_sendhex' 4
  '[serial:open]' 115200
  waitMillis 10
  '_sendhex' 'c0003f'
  _pup_connected = 1
  '[serial:open]' 115200
}

to '_send_data' mode {
  if (_pup_connected == 1) {
    local 'payload' (at (mode + 1) _pup_payloads)
    local 'loglen' (at 5 (at (mode + 1) _pup_commands))
    local 'list' ('[data:makeList]' (((hexToInt 'c0') | (loglen << 3)) | mode))
    local 'len' (1 << loglen)
    local 'datalist' (newList len)
    for i len {
      atPut i datalist (at i payload)
    }
    '_sendatachk' ('[data:join]' list datalist)
  }
}

to '_sendatachk' data {
  local 'chk' 255
  for i (size data) {
    chk = (chk ^ (at i data))
  }
  '[serial:write]' ('[data:join]' data ('[data:makeList]' chk))
}

to '_sendhex' hexstr {
  if (isType hexstr 'number') {
    local 'data' (newList 1)
    atPut 1 data hexstr
  } else {
    local 'len' ((size hexstr) / 2)
    local 'data' (newList len)
    for i len {
      atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
    }
  }
  '[serial:write]' data
  waitMillis 1
}

to '_set_payload' mode payload {
  atPut (mode + 1) _pup_payloads payload
}

to '_tohex' data {
  local 'hexstr' ('[data:toString]' '')
  for i (size data) {
    local 'hexstr' ('[data:join]' hexstr ('dec2any Base' '16' (at i data) 2 false))
  }
  return hexstr
}

to '_unsignedbytes' bytes {
  local 'unsigned' ('[data:makeList]')
  for i (size bytes) {
    local 'val' (at i bytes)
    if (val > 127) {
      val = (val - 256)
    }
    '[data:addLast]' val unsigned
  }
  return unsigned
}

to '_wordstobytes' words {
  local 'bytes' ('[data:makeList]')
  for i (size words) {
    bytes = ('[data:join]' bytes ('_wordtobyte' (at i words)))
  }
  return bytes
}

to '_wordtobyte' word {
  local 'bytes' ('[data:makeList]' (word & 255) (word >> 8))
  return bytes
}

to add_command cmd to_hub from_hub type {
  comment 'type is dropdown ''b'', ''h'', ''i'' for byte, 16-bit word, 32-bit int'
  local 'data_type' ('_get_type' type)
  local 'new_command' ('[data:makeList]' cmd to_hub from_hub data_type ('_calc_len_data' data_type to_hub from_hub))
  if ((size _pup_commands) == 0) {
    _pup_commands = ('[data:makeList]' new_command)
  } else {
    '[data:addLast]' new_command _pup_commands
  }
  _pup_nr_modes = (size _pup_commands)
  '[data:addLast]' (newList 32) _pup_payloads
}

to init sensor_id {
  if (sensor_id == 0) {
    _pup_sensor_id = 61
  } else {
    _pup_sensor_id = sensor_id
  }
  comment 'Initialize global variables'
  _pup_commands = ('[data:makeList]')
  _pup_cur_mode = 0
  _pup_senddata = (newList 32)
  _pup_payloads = ('[data:makeList]')
  _pup_last_nack = (millisOp)
}

to process {
  local 'local_data' ('_heartbeat')
  local 'data_from_hub' (booleanConstant false)
  if ((size local_data) > 0) {
    comment 'arguments passed'
    data_from_hub = (booleanConstant true)
    local 'mode' (at 1 local_data)
    local 'payload_bytes' (at 2 local_data)
  } else {
    local 'mode' _pup_cur_mode
    local 'payload' ('[data:makeList]')
  }
  local 'function_name' (at 1 (at (mode + 1) _pup_commands))
  local 'has_return' ((at 2 (at (mode + 1) _pup_commands)) > 0)
  local 'has_arg' ((at 3 (at (mode + 1) _pup_commands)) > 0)
  local 'data_type' (at 4 (at (mode + 1) _pup_commands))
  local 'tot_len' (at 5 (at (mode + 1) _pup_commands))
  if data_from_hub {
    if (data_type == 0) {
      local 'payload' ('_unsignedbytes' payload_bytes)
    } (data_type == 1) {
      local 'payload' ('_bytestowords' payload_bytes)
    } (data_type == 2) {
      local 'payload' ('_bytestolongs' payload_bytes)
    }
  }
  if (or (and (not has_arg) has_return) (and has_arg (and has_return data_from_hub))) {
    local 'ret_val' (callCustomReporter function_name payload)
    if (isType ret_val 'number') {
      ret_val = ('[data:makeList]' ret_val)
    }
    '_set_payload' mode ('_make_payload' ret_val data_type tot_len)
  } (and has_arg (and (not has_return) data_from_hub)) {
    callCustomCommand function_name payload
  }
  '_send_data' _pup_cur_mode
}

to reset_nack {
  _pup_last_nack = (millisOp)
}

