module micropup
author Ste7an
version 0 2 
choices data_type b h i 
description 'Library to facilitate communication with Pybricks hubs. See https://github.com/ste7anste7an/micropup'
variables _pup_sensor_id _pup_commands _pup_nr_modes _pup_cur_mode _pup_last_nack _pup_connected _pup_senddata _pup_payloads 

  spec ' ' 'init' 'init : sensor_id _' 'auto' 62
  spec ' ' 'add_command' 'add_command _ to_hub _ from_hub _ type _' 'str auto auto str.data_type' '' '1' '1' 'b'
  spec ' ' 'process' 'process'
  spec ' ' 'reset_nack' 'reset_nack'
  spec 'r' '_tohex' '_tohex _' 'auto' '10'
  spec 'r' '_bytestowords' '_bytestowords _' 'auto' '10'
  spec 'r' '_unsignedbytes' '_unsignedbytes _' 'auto' '10'
  spec 'r' '_bytetoword' '_bytetoword _' 'auto' '10'
  spec 'r' '_wordstobytes' '_wordstobytes _' 'auto' '10'
  spec 'r' '_wordtobyte' '_wordtobyte _' 'auto' '10'
  spec 'r' '_longtobyte' '_longtobyte _' 'auto' '10'
  spec 'r' '_bytestolongs' '_bytestolongs _' 'auto' '10'
  spec 'r' '_bytetolong' '_bytetolong _' 'auto' '10'
  spec 'r' '_longstobytes' '_longstobytes _' 'auto' '10'
  spec 'r' '_make_payload' '_make_payload _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_hextolist' '_hextolist _' 'auto' '10'
  spec 'r' '_heartbeat' '_heartbeat'
  spec ' ' '_init_sensor' '_init_sensor'
  spec ' ' '_initmode' '_initmode _' 'auto' '10'
  spec ' ' '_sendatachk' '_sendatachk _' 'auto' '10'
  spec ' ' '_sendhex' '_sendhex _' 'auto' '10'
  spec 'r' '_calc_len_data' '_calc_len_data _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_get_type' '_get_type _' 'auto' '10'
  spec 'r' '_log_len' '_log_len _' 'auto' '10'
  spec 'r' '_log2' '_log2 _' 'auto' '10'
  spec ' ' '_reset' '_reset'
  spec ' ' '_send_data' '_send_data _' 'auto' '10'
  spec ' ' '_set_payload' '_set_payload _ _' 'auto auto' '10' '10'

to '_bytestolongs' bytes {
  local 'longs' ('[data:makeList]')
  for i ((size bytes) / 4) {
    local 'cnt' ((i * 4) - 3)
    '[data:addLast]' ('_bytetolong' ('[data:makeList]' (at (cnt - 0) bytes) (at (cnt + 1) bytes) (at (cnt + 2) bytes) (at (cnt + 3) bytes))) longs
  }
  return longs
}

to '_bytestowords' bytes {
  local 'len' ((size bytes) / 2)
  local 'words' (newList len)
  for i len {
    local 'cnt' (i * 2)
    atPut i words ('_bytetoword' ('[data:makeList]' (at (cnt - 1) bytes) (at (cnt + 0) bytes)))
  }
  return words
}

to '_bytetolong' bytes {
  return ((((at 1 bytes) + ((at 2 bytes) << 8)) + ((at 3 bytes) << 16)) + ((at 4 bytes) << 24))
}

to '_bytetoword' bytes {
  local 'unsigned' ((at 1 bytes) + ((at 2 bytes) << 8))
  if (unsigned > 32767) {
    unsigned = (unsigned - 65536)
  }
  return unsigned
}

to '_calc_len_data' data_type to_hub from_hub {
  return ('_log_len' ((1 << data_type) * (maximum to_hub from_hub)))
}

to '_get_type' type {
  local 'data_type' 0
  if (type == 'i') {
    data_type = 2
  } (type == 'h') {
    data_type = 1
  } else {
    data_type = 0
  }
  return data_type
}

to '_heartbeat' {
  if (((millisOp) - _pup_last_nack) > 4000) {'_reset'}
  if (('[serial:available]') > 0) {
    local 'cmd' (at 1 ('[serial:readNr]' 1))
    if (cmd == 2) {
      _pup_last_nack = (millisOp)
      '_sendatachk' ('[data:makeList]' ((hexToInt '46') | 0) 0)
    } (cmd == (hexToInt '46')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      comment 'mode = (b & 0b111)'
      local 'wrtmode' ((at 3 ser_data) & 7)
      _pup_cur_mode = wrtmode
      comment ' len = 2 ** ((b & 0b111000) >> 3)'
      local 'lenpow2' (((at 3 ser_data) & 56) >> 3)
      local 'len' (1 << lenpow2)
      local 'list' (newList len)
      for i len {
        atPut i list (at (i + 3) ser_data)
      }
      return ('[data:makeList]' wrtmode list)
    } (cmd == (hexToInt '43')) {
      _pup_last_nack = (millisOp)
      local 'ser_data' ('[serial:read]')
      _pup_cur_mode = (at 1 ser_data)
      '_send_data' _pup_cur_mode
    }
  }
}

to '_hextolist' hexstr {
  local 'len' ((size hexstr) / 2)
  local 'data' (newList len)
  for i len {
    atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
  }
  return data
}

to '_init_sensor' {
  '_sendhex' 0
  comment 'TYPE_ID'
  '_sendatachk' ('[data:makeList]' (hexToInt '40') _pup_sensor_id)
  comment 'CMD_MODES 0x49 <nr_modes> <nr_views>'
  '_sendatachk' ('[data:makeList]' (hexToInt '49') (_pup_nr_modes - 1) (_pup_nr_modes - 1))
  comment 'set baud rate to 115200'
  '_sendhex' '5200c201006e'
  comment 'CMD_VERSION'
  '_sendhex' '5f0000000100000105a5'
  for i _pup_nr_modes {
    '_initmode' ((_pup_nr_modes + 0) - i)
  }
}

to '_initmode' mode {
  local 'cur_command' (at (mode + 1) _pup_commands)
  local 'data_type' (at 4 cur_command)
  comment 'INFO mode + power'
  local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt 'a0') | mode)) ('_hextolist' ('[data:toString]' '00646174')) ('[data:makeList]' (hexToInt '30') (48 + mode)) ('_hextolist' ('[data:toString]' '0080000000050400000000')))
  waitMillis 20
  '_sendatachk' list
  comment 'INFO RAW, PCT, SI'
  for i 3 {
    local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt '98') | mode) i) ('_hextolist' ('[data:toString]' '000000000000c842')))
    '_sendatachk' list
    waitMillis 20
  }
  waitMillis 10
  comment 'INFO UNITS = empty len 0'
  local 'list' ('[data:makeList]' ((hexToInt '80') | mode) 4 0)
  '_sendatachk' list
  comment 'info mapping: 0x88|mode 0x05 input=(abs)0x10 output=(abs)0x10'
  local 'list' ('[data:makeList]' ((hexToInt '88') | mode) 5 (hexToInt '10') (hexToInt '10'))
  '_sendatachk' list
  comment '0x90|mode 0x80 <data_type> <log2(len)> <digits> <decimals>'
  local 'max_len' (maximum (at 2 cur_command) (at 3 cur_command))
  local 'list' ('[data:makeList]' ((hexToInt '90') | mode) (hexToInt '80') max_len (at 4 cur_command) 3 0)
  '_sendatachk' list
}

to '_log2' len {
  if (len == 1) {
    return 0
  } (len == 2) {
    return 1
  } (len == 4) {
    return 2
  } (len == 8) {
    return 3
  } (len == 16) {
    return 4
  } (len == 32) {
    return 5
  } else {
    return 0
  }
}

to '_log_len' len {
  local 'loglen' 0
  if (len > 16) {
    return 5
  } (len > 8) {
    return 4
  } (len > 4) {
    return 3
  } (len > 2) {
    return 2
  } (len > 1) {
    return 1
  } else {
    return 0
  }
}

to '_longstobytes' longs {
  local 'bytes' ('[data:makeList]')
  for i (size longs) {
    bytes = ('[data:join]' bytes ('_longtobyte' (at i longs)))
  }
  return bytes
}

to '_longtobyte' long {
  local 'bytes' ('[data:makeList]' (long & 255) ((long >> 8) & 255) ((long >> 16) & 255) ((long >> 24) & 255))
  return bytes
}

to '_make_payload' payload data_type tot_len {
  if (data_type == 0) {
    local 'raw_bytes' payload
  } (data_type == 1) {
    local 'raw_bytes' ('_wordstobytes' payload)
  } (data_type == 2) {
    local 'raw_bytes' ('_longstobytes' payload)
  } else {
  }
  comment 'extend raw_bytes to 1>>loglen'
  local 'pad_len' ((1 << tot_len) - (size raw_bytes))
  if (pad_len > 0) {
    return ('[data:join]' raw_bytes (newList pad_len))
  } else {
    return raw_bytes
  }
}

to '_reset' {
  '[serial:close]'
  _pup_last_nack = (millisOp)
  _pup_cur_mode = 0
  _pup_connected = 0
  local 'tmp_var' 0
  if (('[serial:espversion]') == 2) {
    tmp_var = (digitalReadOp 8)
    digitalWriteOp 7 true
    waitMillis 50
    digitalWriteOp 7 false
  } else {
    '[serial:close]'
    tmp_var = (digitalReadOp 18)
    digitalWriteOp 19 true
    waitMillis 50
    digitalWriteOp 19 false
  }
  waitMillis 450
  '[serial:open]' 2400
  '_init_sensor'
  '_sendhex' 4
  '[serial:open]' 115200
  waitMillis 10
  '_sendhex' 'c0003f'
  _pup_connected = 1
  '[serial:open]' 115200
}

to '_send_data' mode {
  if (_pup_connected == 1) {
    local 'payload' (at (mode + 1) _pup_payloads)
    local 'loglen' (at 5 (at (mode + 1) _pup_commands))
    local 'list' ('[data:makeList]' (((hexToInt 'c0') | (loglen << 3)) | mode))
    local 'len' (1 << loglen)
    local 'datalist' (newList len)
    for i len {
      atPut i datalist (at i payload)
    }
    '_sendatachk' ('[data:join]' list datalist)
  }
}

to '_sendatachk' data {
  local 'chk' 255
  for i (size data) {
    chk = (chk ^ (at i data))
  }
  '[serial:write]' ('[data:join]' data ('[data:makeList]' chk))
}

to '_sendhex' hexstr {
  if (isType hexstr 'number') {
    local 'data' (newList 1)
    atPut 1 data hexstr
  } else {
    local 'len' ((size hexstr) / 2)
    local 'data' (newList len)
    for i len {
      atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
    }
  }
  '[serial:write]' data
  waitMillis 1
}

to '_set_payload' mode payload {
  atPut (mode + 1) _pup_payloads payload
}

to '_tohex' data {
  local 'hexstr' ('[data:toString]' '')
  for i (size data) {
    local 'hexstr' ('[data:join]' hexstr ('dec2any Base' '16' (at i data) 2 false))
  }
  return hexstr
}

to '_unsignedbytes' bytes {
  local 'unsigned' ('[data:makeList]')
  for i (size bytes) {
    local 'val' (at i bytes)
    if (val > 127) {
      val = (val - 256)
    }
    '[data:addLast]' val unsigned
  }
  return unsigned
}

to '_wordstobytes' words {
  local 'bytes' ('[data:makeList]')
  for i (size words) {
    bytes = ('[data:join]' bytes ('_wordtobyte' (at i words)))
  }
  return bytes
}

to '_wordtobyte' word {
  local 'bytes' ('[data:makeList]' (word & 255) (word >> 8))
  return bytes
}

to add_command cmd to_hub from_hub type {
  comment 'type is dropdown ''b'', ''h'', ''i'' for byte, 16-bit word, 32-bit int'
  local 'data_type' ('_get_type' type)
  local 'new_command' ('[data:makeList]' cmd to_hub from_hub data_type ('_calc_len_data' data_type to_hub from_hub))
  if ((size _pup_commands) == 0) {
    _pup_commands = ('[data:makeList]' new_command)
  } else {
    '[data:addLast]' new_command _pup_commands
  }
  _pup_nr_modes = (size _pup_commands)
  '[data:addLast]' (newList 32) _pup_payloads
}

to init sensor_id {
  if (sensor_id == 0) {
    _pup_sensor_id = 61
  } else {
    _pup_sensor_id = sensor_id
  }
  comment 'Initialize global variables'
  _pup_commands = ('[data:makeList]')
  _pup_cur_mode = 0
  _pup_senddata = (newList 32)
  _pup_payloads = ('[data:makeList]')
  _pup_last_nack = (millisOp)
}

to process {
  local 'local_data' ('_heartbeat')
  local 'data_from_hub' (booleanConstant false)
  if ((size local_data) > 0) {
    comment 'arguments passed'
    data_from_hub = (booleanConstant true)
    local 'mode' (at 1 local_data)
    local 'payload_bytes' (at 2 local_data)
  } else {
    local 'mode' _pup_cur_mode
    local 'payload' ('[data:makeList]')
  }
  local 'function_name' (at 1 (at (mode + 1) _pup_commands))
  local 'has_return' ((at 2 (at (mode + 1) _pup_commands)) > 0)
  local 'has_arg' ((at 3 (at (mode + 1) _pup_commands)) > 0)
  local 'data_type' (at 4 (at (mode + 1) _pup_commands))
  local 'tot_len' (at 5 (at (mode + 1) _pup_commands))
  if data_from_hub {
    if (data_type == 0) {
      local 'payload' ('_unsignedbytes' payload_bytes)
    } (data_type == 1) {
      local 'payload' ('_bytestowords' payload_bytes)
    } (data_type == 2) {
      local 'payload' ('_bytestolongs' payload_bytes)
    }
  }
  if (or (and (not has_arg) has_return) (and has_arg (and has_return data_from_hub))) {
    local 'ret_val' (callCustomReporter function_name payload)
    if (isType ret_val 'number') {
      ret_val = ('[data:makeList]' ret_val)
    }
    '_set_payload' mode ('_make_payload' ret_val data_type tot_len)
  } (and has_arg (and (not has_return) data_from_hub)) {
    callCustomCommand function_name payload
  }
  '_send_data' _pup_cur_mode
}

to reset_nack {
  _pup_last_nack = (millisOp)
}

