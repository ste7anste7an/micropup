module main
author unknown
version 1 0 
description ''
variables _commands tmp _nr_modes data _cur_mode count _last_nack _connected _pup_senddata 

  spec ' ' 'add_command' 'add_command _ to_hub _ from_hub _ type _' 'auto auto auto auto' '10' '10' 10 '10'
  spec 'r' 'hextolist' 'hextolist _' 'auto' '10'
  spec ' ' 'init_sensor' 'init_sensor'
  spec ' ' 'initmode' 'initmode _' 'auto' '10'
  spec ' ' 'sendatachk' 'sendatachk _' 'auto' '10'
  spec ' ' 'sendhex' 'sendhex _' 'auto' '10'
  spec 'r' '_calc_len_data' '_calc_len_data _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_get_type' '_get_type _' 'auto' '10'
  spec 'r' '_log_len' '_log_len _' 'auto' '10'
  spec 'r' 'aap' 'aap _' 'auto' '10'
  spec 'r' 'heartbeat' 'heartbeat'
  spec ' ' 'hond' 'led _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' 'kat' 'kat _ _ _ _ _ _ _ _' 'auto auto auto auto auto auto auto auto' '10' '10' '10' '10' '10' '10' '10' '10'
  spec 'r' 'log2' 'log2 _' 'auto' '10'
  spec 'r' 'muis' 'muis'
  spec ' ' 'reset' 'reset'
  spec ' ' 'send_data' 'send_data _' 'auto' '10'
  spec 'r' 'tohex' 'tohex _' 'auto' '10'

to '_calc_len_data' data_type to_hub from_hub {
  return ('_log_len' ((1 << data_type) * (maximum to_hub from_hub)))
}

to '_get_type' type {
  local 'data_type' 0
  if (type == 'i') {
    data_type = 2
  } (type == 'w') {
    data_type = 1
  } else {
    data_type = 0
  }
  return data_type
}

to '_log_len' len {
  local 'loglen' 0
  if (len > 16) {
    return 5
  } (len > 8) {
    return 4
  } (len > 4) {
    return 3
  } (len > 2) {
    return 2
  } (len > 1) {
    return 1
  } else {
    return 0
  }
}

to aap a {
  return (a * 3)
}

to add_command cmd to_hub from_hub type {
  comment 'type is dropdown ''B'', ''W'', ''L'' for byte, 16-bit word, 32-bit int'
  local 'data_type' ('_get_type' type)
  local 'new_command' ('[data:makeList]' cmd to_hub from_hub data_type ('_calc_len_data' data_type to_hub from_hub))
  if ((size _commands) == 0) {
    _commands = ('[data:makeList]' new_command)
  } else {
    '[data:addLast]' new_command _commands
  }
  _nr_modes = (size _commands)
}

to heartbeat {
  if ((('[serial:millis]') - _last_nack) > 4000) {reset}
  if (('[serial:available]') > 0) {
    graphIt (('[serial:millis]') - _last_nack) ''
    local 'cmd' (at 1 ('[serial:readNr]' 1))
    if (cmd == 2) {
      _last_nack = ('[serial:millis]')
      sendatachk ('[data:makeList]' ((hexToInt '46') | 0) 0)
    } (cmd == (hexToInt '46')) {
      _last_nack = ('[serial:millis]')
      local 'ser_data' ('[serial:read]')
      comment 'mode = (b & 0b111)'
      local 'wrtmode' ((at 3 ser_data) & 7)
      _cur_mode = wrtmode
      comment ' len = 2 ** ((b & 0b111000) >> 3)'
      local 'lenpow2' (((at 3 ser_data) & 56) >> 3)
      local 'len' (1 << lenpow2)
      local 'list' ('[data:makeList]')
      for i len {
        '[data:addLast]' (at (i + 3) ser_data) list
      }
      graphIt (('[serial:millis]') - _last_nack) (at (i + 3) ser_data) ''
      return ('[data:makeList]' wrtmode list)
    } (cmd == (hexToInt '43')) {
      _last_nack = ('[serial:millis]')
      local 'ser_data' ('[serial:read]')
      _cur_mode = (at 1 ser_data)
      sayIt 'mode' _cur_mode
      waitMillis 5
      send_data _cur_mode
    }
  }
}

to hextolist hexstr {
  local 'len' ((size hexstr) / 2)
  local 'data' (newList len)
  for i len {
    atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
  }
  return data
}

to hond foo bar baz {
  neoPixelSetAllToColor (colorFromRGB foo bar baz)
}

to init_sensor {
  sendhex 0
  comment 'TYPE_ID'
  sendhex '403e81'
  comment 'CMD_MODES 0x49 <nr_modes> <nr_views>'
  sendatachk ('[data:makeList]' (hexToInt '49') (_nr_modes - 1) (_nr_modes - 1))
  comment 'set baud rate to 115200'
  sendhex '5200c201006e'
  comment 'CMD_VERSION'
  sendhex '5f0000000100000105a5'
  for i _nr_modes {
    initmode ((_nr_modes + 0) - i)
  }
}

to initmode mode {
  local 'cur_command' (at (mode + 1) _commands)
  local 'data_type' (at 4 cur_command)
  comment 'INFO mode + power'
  local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt 'a0') | mode)) (hextolist ('[data:toString]' '00646174')) ('[data:makeList]' (hexToInt '30') (48 + mode)) (hextolist ('[data:toString]' '0080000000050400000000')))
  waitMillis 20
  sendatachk list
  comment 'INFO RAW, PCT, SI'
  for i 3 {
    local 'list' ('[data:join]' ('[data:makeList]' ((hexToInt '98') | mode) i) (hextolist ('[data:toString]' '000000000000c842')))
    sendatachk list
    waitMillis 20
  }
  waitMillis 10
  comment 'INFO UNITS = empty len 0'
  local 'list' ('[data:makeList]' ((hexToInt '80') | mode) 4 0)
  sendatachk list
  comment 'info mapping: 0x88|mode 0x05 input=(abs)0x10 output=(abs)0x10'
  local 'list' ('[data:makeList]' ((hexToInt '88') | mode) 5 (hexToInt '10') (hexToInt '10'))
  sendatachk list
  comment '0x90|mode 0x80 <data_type> <log2(len)> <digits> <decimals>'
  local 'max_len' (maximum (at 2 cur_command) (at 3 cur_command))
  local 'list' ('[data:makeList]' ((hexToInt '90') | mode) (hexToInt '80') max_len (at 4 cur_command) 3 0)
  sendatachk list
}

to kat foo bar baz quux garply spam frob corge {
  return ('[data:makeList]' corge frob spam garply quux baz bar foo)
}

to log2 len {
  if (len == 1) {
    return 0
  } (len == 2) {
    return 1
  } (len == 4) {
    return 2
  } (len == 8) {
    return 3
  } (len == 16) {
    return 4
  } (len == 32) {
    return 5
  } else {
    return 0
  }
}

to muis {
  return ('[data:makeList]' count (count + 2))
}

to reset {
  '[serial:close]'
  _last_nack = ('[serial:millis]')
  _cur_mode = 0
  _connected = 0
  local 'tmp_var' 0
  if (('[serial:espversion]') == 2) {
    tmp_var = (digitalReadOp 8)
    digitalWriteOp 7 true
    waitMillis 50
    digitalWriteOp 7 false
  } else {
    '[serial:close]'
    tmp_var = (digitalReadOp 18)
    digitalWriteOp 19 true
    waitMillis 50
    digitalWriteOp 19 false
  }
  waitMillis 450
  '[serial:open]' 2400
  init_sensor
  sendhex 4
  '[serial:open]' 115200
  waitMillis 10
  sendhex 'c0003f'
  _connected = 1
  '[serial:open]' 115200
}

to send_data mode {
  if (_connected == 1) {
    local 'loglen' (at 5 (at (mode + 1) _commands))
    local 'list' ('[data:makeList]' (((hexToInt 'c0') | (loglen << 3)) | mode))
    for i (1 << loglen) {
      '[data:addLast]' (at i _pup_senddata) list
    }
    sendatachk list
  }
}

to sendatachk data {
  local 'chk' 255
  for i (size data) {
    chk = (chk ^ (at i data))
  }
  '[data:addLast]' chk data
  '[serial:write]' data
}

to sendhex hexstr {
  if (isType hexstr 'number') {
    local 'data' (newList 1)
    atPut 1 data hexstr
  } else {
    local 'len' ((size hexstr) / 2)
    local 'data' (newList len)
    for i len {
      atPut i data (hexToInt ('[data:copyFromTo]' hexstr ((i * 2) - 1) (i * 2)))
    }
  }
  '[serial:write]' data
  waitMillis 1
}

to tohex data {
  local 'hexstr' ('[data:toString]' '')
  for i (size data) {
    local 'hexstr' ('[data:join]' hexstr ('dec2any Base' '16' (at i data) 2 false))
  }
  return hexstr
}

script 1529 56 {
to aap {}
}

script 141 124 {
whenStarted
_commands = ('[data:makeList]')
_cur_mode = 0
_pup_senddata = (newList 32)
add_command 'aap' 1 1 'b'
add_command 'muis' 2 0 'b'
add_command 'led' 0 3 'b'
add_command 'kat' 8 8 'b'
_last_nack = ('[serial:millis]')
forever {
  count = ((count + 1) % 100)
  for i 32 {
    atPut i _pup_senddata (count + i)
  }
  data = (heartbeat)
  if ((size data) > 0) {
    sayIt 'data=' (tohex (at 2 data))
  }
  send_data _cur_mode
  waitMillis 20
}
}

script 629 194 {
to add_command {}
}

script 1215 301 {
to '_get_type' {}
}

script 1483 395 {
to send_data {}
}

script 725 849 {
to init_sensor {}
}

script 1189 849 {
to sendhex {}
}

script 50 1079 {
to initmode {}
}

script 644 1381 {
to '_calc_len_data' {}
}

script 1171 1507 {
to '_log_len' {}
}

script 714 1944 {
to tohex {}
}

script 716 2312 {
to hextolist {}
}

script 749 2878 {
to heartbeat {}
}

script 364 2888 {
to reset {}
}

script 494 3062 (v tmp_var)

script 209 3985 {
to hond {}
}

script 134 4164 {
to muis {}
}

script 50 4329 {
to kat {}
}


module 'LED Display' Output
author MicroBlocks
version 1 9 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'
  spec ' ' 'set display color' 'set display color _' 'color'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to 'set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module NeoPixel Output
author MicroBlocks
version 1 11 
description 'Control NeoPixel (WS2812) RGB LED strips and rings.
'
variables _np_pixels 

  spec ' ' 'neoPixelAttach' 'attach _ LED NeoPixel strip to pin _ : has white _' 'num auto bool' 10 '' false
  spec ' ' 'setNeoPixelColors10' 'set NeoPixels _ _ _ _ _ _ _ _ _ _' 'color color color color color color color color color color'
  spec ' ' 'clearNeoPixels' 'clear NeoPixels'
  spec ' ' 'neoPixelSetAllToColor' 'set all NeoPixels color _' 'color'
  spec ' ' 'setNeoPixelColor' 'set NeoPixel _ color _' 'num color' 1
  space
  spec 'r' 'neoPixel_colorSwatch' '_' 'color'
  spec 'r' 'colorFromRGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'randomColor' 'random color'
  space
  spec ' ' 'rotateNeoPixelsBy' 'rotate NeoPixels by _' 'auto' 1
  space
  spec ' ' 'NeoPixel_brighten' 'brighten NeoPixel _ by _' 'num num' 1 10
  spec ' ' 'NeoPixel_brighten_all' 'brighten all NeoPixels by _' 'num' 10
  spec ' ' 'NeoPixel_shift_color' 'shift NeoPixel _ color by _' 'num num' 1 10
  spec ' ' 'NeoPixel_shift_all_colors' 'shift all NeoPixel colors by _' 'num' 10
  space
  spec ' ' '_NeoPixel_ensureInitialized' '_NeoPixel_ensureInitialized'
  spec ' ' '_NeoPixel_increaseRGB' '_NeoPixel_increaseRGB of _ by _' 'num num' 1 10
  spec ' ' '_NeoPixel_rotate' '_NeoPixel_rotate_left _' 'bool' true
  spec ' ' '_NeoPixel_update' '_NeoPixel_update'
  spec ' ' '_NeoPixel_shift_hue' '_NeoPixel_shift_hue of _ by _' 'auto auto' '10' '10'

to NeoPixel_brighten i delta {
  '_NeoPixel_increaseRGB' i delta
  '_NeoPixel_update'
}

to NeoPixel_brighten_all delta {
  for i (size _np_pixels) {
    '_NeoPixel_increaseRGB' i delta
  }
  '_NeoPixel_update'
}

to NeoPixel_shift_all_colors delta {
  for i (size _np_pixels) {
    '_NeoPixel_shift_hue' i delta
  }
  '_NeoPixel_update'
}

to NeoPixel_shift_color i delta {
  '_NeoPixel_shift_hue' i delta
  '_NeoPixel_update'
}

to '_NeoPixel_ensureInitialized' {
  if (_np_pixels == 0) {if (or ((boardType) == 'M5Atom-Matrix') (or ((boardType) == 'Mbits') ((boardType) == 'micro:STEAMakers'))) {
    neoPixelAttach 25 '' false
  } ((boardType) == 'D1-Mini') {
    comment 'D1 mini kit'
    neoPixelAttach 7 15 false
  } else {
    neoPixelAttach 10 '' false
  }}
}

to '_NeoPixel_increaseRGB' i delta {
  if (or (i < 1) (i > (size _np_pixels))) {return}
  local 'rgb' (at i _np_pixels)
  if (rgb != 0) {
    local 'h' ('[misc:hue]' rgb)
    local 's' ('[misc:saturation]' rgb)
    local 'v' (('[misc:brightness]' rgb) + delta)
    v = (maximum 20 (minimum v 100))
    atPut i _np_pixels ('[misc:hsvColor]' h s v)
  }
}

to '_NeoPixel_rotate' left {
  '_NeoPixel_ensureInitialized'
  local 'length' (size _np_pixels)
  if left {
    local 'first' (at 1 _np_pixels)
    for i (length - 1) {
      atPut i _np_pixels (at (i + 1) _np_pixels)
    }
    atPut length _np_pixels first
  } else {
    local 'last' (at length _np_pixels)
    for i (length - 1) {
      atPut ((length - i) + 1) _np_pixels (at (length - i) _np_pixels)
    }
    atPut 1 _np_pixels last
  }
}

to '_NeoPixel_shift_hue' i delta {
  if (or (i < 1) (i > (size _np_pixels))) {return}
  local 'rgb' (at i _np_pixels)
  if (rgb != 0) {
    local 'h' ((('[misc:hue]' rgb) + delta) % 360)
    local 's' ('[misc:saturation]' rgb)
    local 'v' ('[misc:brightness]' rgb)
    atPut i _np_pixels ('[misc:hsvColor]' h s v)
  }
}

to '_NeoPixel_update' {
  '[display:neoPixelSend]' _np_pixels
  waitMicros 300
}

to clearNeoPixels {
  '_NeoPixel_ensureInitialized'
  atPut 'all' _np_pixels 0
  '_NeoPixel_update'
}

to colorFromRGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to neoPixelAttach number pinNumber optionalHasWhite {
  hasWhite = false
  if ((pushArgCount) > 2) {
    hasWhite = optionalHasWhite
  }
  if (or (_np_pixels == 0) (number != (size _np_pixels))) {
    _np_pixels = (newList number)
  }
  atPut 'all' _np_pixels 0
  '[display:neoPixelSetPin]' pinNumber hasWhite
}

to neoPixelSetAllToColor color {
  '_NeoPixel_ensureInitialized'
  atPut 'all' _np_pixels color
  '_NeoPixel_update'
}

to neoPixel_colorSwatch color {
  return color
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to rotateNeoPixelsBy n {
  '_NeoPixel_ensureInitialized'
  repeat (absoluteValue n) {
    '_NeoPixel_rotate' (n > 0)
  }
  '_NeoPixel_update'
}

to setNeoPixelColor i color {
  '_NeoPixel_ensureInitialized'
  if (and (1 <= i) (i <= (size _np_pixels))) {
    atPut i _np_pixels color
    '_NeoPixel_update'
  }
}

to setNeoPixelColors10 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 {
  '_NeoPixel_ensureInitialized'
  if ((size _np_pixels) >= 1) {
    atPut 1 _np_pixels c1
  }
  if ((size _np_pixels) >= 2) {
    atPut 2 _np_pixels c2
  }
  if ((size _np_pixels) >= 3) {
    atPut 3 _np_pixels c3
  }
  if ((size _np_pixels) >= 4) {
    atPut 4 _np_pixels c4
  }
  if ((size _np_pixels) >= 5) {
    atPut 5 _np_pixels c5
  }
  if ((size _np_pixels) >= 6) {
    atPut 6 _np_pixels c6
  }
  if ((size _np_pixels) >= 7) {
    atPut 7 _np_pixels c7
  }
  if ((size _np_pixels) >= 8) {
    atPut 8 _np_pixels c8
  }
  if ((size _np_pixels) >= 9) {
    atPut 9 _np_pixels c9
  }
  if ((size _np_pixels) >= 10) {
    atPut 10 _np_pixels c10
  }
  '_NeoPixel_update'
}


module Tone Output
author MicroBlocks
version 1 9 
tags tone sound music audio note speaker 
choices tone_NoteName 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 
description 'Audio tone generation. Make music with MicroBlocks!
'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'nt;c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  space
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  space
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  space
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'
  spec ' ' '_tone init note names' '_tone init note names'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  'normalized note' = (ifExpression ((at 1 (v 'normalized note')) == 'n') (v 'normalized note') ('[data:join]' 'nt;' (v 'normalized note')))
  '_tone init note names'
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_tone init note names' {
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 'nt;c_' 'nt;db' 'nt;d_' 'nt;eb' 'nt;e_' 'nt;e#' 'nt;f_' 'nt;gb' 'nt;g_' 'nt;ab' 'nt;a_' 'nt;bb' 'nt;b_' 'nt;b#')
    _toneArezzoNotes = ('[data:makeList]' 'nt;do' 'nt;do#' 'nt;re' 'nt;re#' 'nt;mi' 'nt;fa' 'nt;fa#' 'nt;sol' 'nt;sol#' 'nt;la' 'nt;la#' 'nt;si' 'nt;do_' 'nt;dob' 'nt;re_' 'nt;reb' 'nt;mi_' 'nt;mi#' 'nt;fa_' 'nt;solb' 'nt;sol_' 'nt;lab' 'nt;la_' 'nt;sib' 'nt;si_' 'nt;si#')
  }
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}


module dec2anyBase
author 'Turgut Guneysu'
version 1 2 
choices BaseMenu '2' '8' '16' '32' 
description 'Converts DEC numbers into any Base system.
eg: BIN (base=2) or OCT (base=8) or HEX (base=16)

Changes: fix padding
'

  spec 'r' 'dec2any Base' 'dec2any Base _ Dec# _ PadLen _ Rev _' 'str.BaseMenu num num bool' '16' 255 4 false

to 'dec2any Base' base decNo padLength reversed {
  local '_answer' ('[data:makeList]')
  local '_output' ''
  repeatUntil (decNo < base) {
    '[data:addLast]' (decNo - ((decNo / base) * base)) _answer
    decNo = (decNo / base)
  }
  '[data:addLast]' decNo _answer
  repeatUntil ((size _answer) == 0) {
    if ((at 'last' _answer) == 0) {
      _output = ('[data:join]' _output '0')
    } else {
      _output = ('[data:join]' _output (at (at 'last' _answer) '123456789ABCDEFGHIJKLMNOPQRSTUV'))
    }
    '[data:delete]' 'last' _answer
  }
  if (and (padLength > 0) ((size _output) < padLength)) {
    _output = ('[data:join]' ('[data:copyFromTo]' '0000000000000000' 1 (padLength - (size _output))) _output)
  }
  if reversed {
    _answer = ('[data:split]' _output '')
    _output = ('[data:makeList]')
    repeat (size _answer) {
      '[data:addLast]' (at 'last' _answer) _output
      '[data:delete]' 'last' _answer
    }
    _output = ('[data:join]' '' ('[data:joinStrings]' _output))
  }
  return _output
}


module extra
author Ste7an
version 1 0 
description 'Extra system functions for Serialcommunication and ESP32 version'

  spec 'r' '[serial:readNr]' 'serial read _ bytes' 'num' 10
  spec 'r' '[serial:available]' 'serial available'
  spec 'r' '[serial:espversion]' 'get esp version'
  spec 'r' '[serial:millis]' 'millis'
